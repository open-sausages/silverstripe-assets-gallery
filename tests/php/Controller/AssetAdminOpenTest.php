<?php

namespace SilverStripe\AssetAdmin\Tests\Controller;

use SilverStripe\AssetAdmin\Controller\AssetAdminOpen;
use SilverStripe\AssetAdmin\Tests\Controller\AssetAdminTest\TestFile;
use SilverStripe\Dev\FunctionalTest;
use SilverStripe\Assets\Dev\TestAssetStore;
use SilverStripe\Assets\Folder;
use SilverStripe\Assets\File;
use SilverStripe\Versioned\Versioned;
use PHPUnit\Framework\Attributes\DataProvider;

class AssetAdminOpenTest extends FunctionalTest
{
    protected static $extra_dataobjects = [
        TestFile::class,
    ];

    protected static $fixture_file = 'AssetAdminOpenTest.yml';

    protected function setUp(): void
    {
        parent::setUp();
        TestAssetStore::activate('AssetAdminOpenTest');
        $this->logInWithPermission('ADMIN');

        // Create a test folders for each of the fixture references
        foreach (Folder::get() as $folder) {
            $folder->copyVersionToStage(Versioned::DRAFT, Versioned::LIVE);
        }

        // Create a test files for each of the fixture references
        $content = str_repeat('x', 100);
        foreach (File::get()->exclude('ClassName', [Folder::class]) as $file) {
            $file->setFromString($content, $file->generateFilename());
            $file->write();
            $file->copyVersionToStage(Versioned::DRAFT, Versioned::LIVE);
        }
    }

    protected function tearDown(): void
    {
        TestAssetStore::reset();
        parent::tearDown();
    }

    public static function provideApiRead(): array
    {
        return [
            'Valid' => [
                'idType' => 'existing',
                'fail' => '',
                'filter' => '',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 200,
            ],
            'Valid new record ID' => [
                'idType' => 'new-record',
                'fail' => '',
                'filter' => '',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 200,
            ],
            'Valid filtered' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter[name]=ApiTestFile',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 200,
            ],
            'Valid filterered pagination' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter[name]=ApiTestFile',
                'page' => 0,
                'pageLength' => 2,
                'expectedCode' => 200,
            ],
            'Valid filterered pagination page two' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter[name]=ApiTestFile',
                'page' => 2,
                'pageLength' => 2,
                'expectedCode' => 200,
            ],
            'Valid filtered current folder only' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter[name]=ApiTestFile&filter[currentFolderOnly]=1',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 200,
            ],
            'Reject invalid page' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter[name]=ApiTestFile',
                'page' => 'food',
                'pageLength' => 2,
                'expectedCode' => 404,
            ],
            'Reject invalid filter' => [
                'idType' => 'folder-three',
                'fail' => '',
                'filter' => 'filter=ApiTestFile',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 404,
            ],
            'Reject fail canView()' => [
                'idType' => 'existing',
                'fail' => 'can-view',
                'filter' => '',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 403,
            ],
            'Reject invalid ID' => [
                'idType' => 'invalid',
                'fail' => '',
                'filter' => '',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 404,
            ],
            'Reject non-numeric ID' => [
                'idType' => 'non-numeric',
                'fail' => '',
                'filter' => '',
                'page' => 0,
                'pageLength' => 0,
                'expectedCode' => 404,
            ],
        ];
    }

    #[DataProvider('provideApiRead')]
    public function testApiRead(
        string $idType,
        string $fail,
        string $filter,
        int|string $page,
        int $pageLength,
        int $expectedCode
    ): void {
        TestFile::$fail = $fail;
        $id = $this->getID($idType);
        $url = "/admin/assets-open/api/read/$id";
        if ($pageLength) {
            AssetAdminOpen::config()->set('page_length', $pageLength);
        }
        if ($filter) {
            $url .= "?$filter";
        }
        if ($page) {
            $url .= '&page=' . $page;
        }
        $response = $this->mainSession->sendRequest('GET', $url, []);
        $this->assertSame('application/json', $response->getHeader('Content-type'));
        $this->assertSame($expectedCode, $response->getStatusCode());
        if ($expectedCode === 200) {
            $data = json_decode($response->getBody(), true);
            if ($idType === 'new-record') {
                $children = [
                    'pageInfo' => [
                        'totalCount' => 3,
                    ],
                    'nodes' => [
                        $this->getFileData('ApiFolder01'),
                        $this->getFileData('ApiFolder02'),
                        $this->getFileData('ApiTestFile01'),
                    ],
                ];
                $expected = $this->getFileData('ApiFolder01', [], $children);
                $expected['exists'] = false;
                $expected['filename'] = '/';
                $expected['id'] = 0;
                $expected['lastEdited'] = null;
                $expected['published'] = false;
                $expected['name'] = null;
                $expected['parentId'] = null;
                $expected['title'] = null;
                $expected['version'] = null;
            } elseif (str_contains($filter, 'filter[name]=ApiTestFile')) {
                $ancestors = [$this->getFileData('ApiFolder01')];
                $totalCount = 6;
                if ($pageLength === 2) {
                    if ($page === 2) {
                        $nodes = [
                            $this->getFileData('ApiTestFile03'),
                            $this->getFileData('ApiTestFile04'),
                        ];
                    } else {
                        $nodes = [
                            $this->getFileData('ApiTestFile01'),
                            $this->getFileData('ApiTestFile02'),
                        ];
                    }
                } elseif (str_contains($filter, 'filter[currentFolderOnly]=1')) {
                    $totalCount = 2;
                    $nodes = [
                        $this->getFileData('ApiTestFile05'),
                        $this->getFileData('ApiTestFile06'),
                    ];
                } else {
                    $nodes = [
                        $this->getFileData('ApiTestFile01'),
                        $this->getFileData('ApiTestFile02'),
                        $this->getFileData('ApiTestFile03'),
                        $this->getFileData('ApiTestFile04'),
                        $this->getFileData('ApiTestFile05'),
                        $this->getFileData('ApiTestFile06'),
                    ];
                }
                $children = [
                    'pageInfo' => [
                        'totalCount' => $totalCount,
                    ],
                    'nodes' => $nodes,
                ];
                $expected = $this->getFileData('ApiFolder03', $ancestors, $children);
            } else {
                $ancestors = [$this->getFileData('ApiFolder01')];
                $expected = $this->getFileData('ApiTestFile02', $ancestors);
            }
            $this->assertSame($expected, $data);
        }
    }

    private function getFileData(string $title, array $ancestors = [], array $children = []): array
    {
        $file = File::get()->find('Title', $title);
        $filenames = [
            'ApiFolder01' => 'ApiFolder01/',
            'ApiFolder02' => 'ApiFolder02/',
            'ApiFolder03' => 'ApiFolder01/ApiFolder03/',
            'ApiFolder04' => 'ApiFolder01/ApiFolder03/ApiFolder04/',
            'ApiTestFile01' => 'ApiTestFile01',
            'ApiTestFile02' => 'ApiFolder01/ApiTestFile02',
            'ApiTestFile03' => 'ApiFolder01/ApiTestFile03',
            'ApiTestFile04' => 'ApiFolder02/ApiTestFile04',
            'ApiTestFile05' => 'ApiFolder01/ApiFolder03/ApiTestFile05',
            'ApiTestFile06' => 'ApiFolder01/ApiFolder03/ApiFolder04/ApiTestFile06',
        ];
        $type = is_a($file, Folder::class) ? 'folder' : 'file';
        $category = $type === 'folder' ? 'folder' : false;
        $url = $type === 'folder' ? null : '/assets/AssetAdminOpenTest/' . $filenames[$title];
        $visibility = $type === 'folder' ? null : 'public';
        $size = $type === 'folder' ? null : '100 bytes';
        $version = $file->Version;
        $children = !empty($children) ? $children : [
            'pageInfo' => [
                'totalCount' => 0,
            ],
            'nodes' => [],
        ];
        return [
            'canDelete' => true,
            'canEdit' => true,
            'canView' => true,
            'category' => $category,
            'exists' => true,
            'filename' => $filenames[$title],
            'id' => $file->ID,
            'lastEdited' => $file->LastEdited,
            'name' => $title,
            'parentId' => $file->ParentID,
            'title' => $title,
            'type' => $type,
            'url' => $url,
            'visibility' => $visibility,
            'hasRestrictedAccess' => false,
            'children' => $children,
            'ancestors' => $ancestors,
            'draft' => false,
            'extension' => '',
            'published' => true,
            'modified' => false,
            'size' => $size,
            'smallThumbnail' => null,
            'thumbnail' => null,
            'version' => $version,
            'isTrackedFormUpload' => false,
        ];
    }

    private function getID(string $idType): mixed
    {
        if ($idType === 'folder-three') {
            return $this->idFromFixture(Folder::class, 'ApiFolder03');
        }
        $id = $this->idFromFixture(TestFile::class, 'ApiTestFile02');
        return match ($idType) {
            'existing' => $id,
            'invalid' => $id + 99999,
            'non-numeric' => 'fish',
            'new-record' => 0,
        };
    }
}
